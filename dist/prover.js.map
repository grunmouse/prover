{"version":3,"file":"prover.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAO,CAAC,GAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,SAAS;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,UAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,UAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzCA;AACA;AACA,iBAAiB,mBAAO,CAAC,GAAsB;AAC/C,IAAI,mBAAO,CAAC,GAAU;AACtB,IAAI,mBAAO,CAAC,GAAa;AACzB;;;;;;;ACLA,iBAAiB,mCAA4B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpBa;AACb;AACA,uBAAuB,mBAAO,CAAC,GAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,SAAS,gBAAgB;AAC/C;AACA;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,SAAS;AAClB,UAAU;AACV;AACA;AACA;AACA,SAAS,SAAS;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,YAAY;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5GA,cAAc,mBAAO,CAAC,GAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpIA;AACA,gBAAgB,mBAAO,CAAC,GAAqB;AAC7C;AACA,sBAAsB,mBAAO,CAAC,GAAqB;AACnD;AACA,OAAO,SAAS,EAAE,mBAAO,CAAC,GAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,yBAAyB,oBAAoB;AAC7C;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,UAAU;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,UAAU,UAAU;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjLA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,GAAqB;AAC7C;AACA,sBAAsB,mBAAO,CAAC,GAAqB;AACnD;AACA;AACA;AACA;AACA,EAAE,iBAAiB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzCA,sBAAsB,mBAAO,CAAC,GAAqB;AACnD;AACA;AACA;AACA,EAAE,iBAAiB;AACnB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChBA;AACA;AACA;AACA;AACA,EAAE,EAAE,mBAAO,CAAC,GAAgB;AAC5B;AACA,aAAa,mBAAO,CAAC,GAAgB;AACrC,cAAc,mBAAO,CAAC,GAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC3CA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,0CAA0C,cAAc;AACxD;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA,MAAM,OAAO;AACb;AACA;AACA;AACA,yCAAyC,WAAW;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnOA;AACA,gBAAgB,mBAAO,CAAC,GAAqB;AAC7C;AACA,sBAAsB,mBAAO,CAAC,GAAqB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC5BA;AACA,sBAAsB,mBAAO,CAAC,GAAqB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnCA;AACA,sBAAsB,mBAAO,CAAC,GAAqB;AACnD,eAAe,mBAAO,CAAC,GAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC3BA,sBAAsB,mBAAO,CAAC,GAAqB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrBA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,GAAqB;AAC7C;AACA,sBAAsB,mBAAO,CAAC,GAAqB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvDA;AACA;AACA,eAAe,mBAAO,CAAC,GAAqB;AAC5C,aAAa,mBAAO,CAAC,GAAuB;AAC5C,IAAI,mBAAO,CAAC,GAAY;AACxB,IAAI,mBAAO,CAAC,GAAgB;AAC5B,IAAI,mBAAO,CAAC,GAAW;AACvB,IAAI,mBAAO,CAAC,EAAc;AAC1B,MAAM,mBAAO,CAAC,GAAW;AACzB,QAAQ,mBAAO,CAAC,GAAa;AAC7B,OAAO,mBAAO,CAAC,GAAY;AAC3B,OAAO,mBAAO,CAAC,GAAY;AAC3B,QAAQ,mBAAO,CAAC,GAAmB;AACnC,OAAO,mBAAO,CAAC,GAAiB;AAChC;;;;;;;ACdA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,GAAqB;AAC7C;AACA,sBAAsB,mBAAO,CAAC,GAAqB;AACnD;AACA;AACA,EAAE,iBAAiB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC/DA;AACA,sBAAsB,mBAAO,CAAC,GAAqB;AACnD,oBAAoB,mBAAO,CAAC,GAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnBA;AACA;AACA,mBAAmB,mBAAO,CAAC,GAAc;AACzC;AACA;AACA,aAAa,mBAAO,CAAC,GAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,mBAAO,CAAC,GAAe;AACjC,IAAI,mBAAO,CAAC,GAAc;AAC1B,IAAI,mBAAO,CAAC,GAAa;AACzB,IAAI,mBAAO,CAAC,GAAY;AACxB;;;;;;;ACjBA;AACA,sBAAsB,mBAAO,CAAC,GAAqB;AACnD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnBA;AACA,sBAAsB,mBAAO,CAAC,GAAqB;AACnD,oBAAoB,mBAAO,CAAC,GAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACbA,eAAe,mBAAO,CAAC,GAAkB;AACzC,cAAc,mBAAO,CAAC,GAAY;AAClC,OAAO,OAAO,EAAE,mBAAO,CAAC,GAAY;AACpC,cAAc,mBAAO,CAAC,GAAY;AAClC,cAAc,mBAAO,CAAC,GAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtBA;AACA,sBAAsB,mBAAO,CAAC,GAAqB;AACnD,OAAO,cAAc,EAAE,mBAAO,CAAC,GAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC1CA;AACA,gBAAgB,mBAAO,CAAC,GAAqB;AAC7C;AACA,sBAAsB,mBAAO,CAAC,GAAqB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrCA;AACA,gBAAgB,mBAAO,CAAC,GAAqB;AAC7C;AACA;AACA;AACA,EAAE,EAAE,mBAAO,CAAC,GAA4B;AACxC;AACA,sBAAsB,mBAAO,CAAC,GAAqB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtCA,OAAO,UAAU,EAAE,mBAAO,CAAC,GAAuB;AAClD;AACA;AACA;AACA;AACA;AACA,sBAAsB,mBAAO,CAAC,GAAoB;AAClD;AACA,iBAAiB,mBAAO,CAAC,GAAsB;AAC/C;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,4BAA4B;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS;AACnC;AACA,gBAAgB,KAAK;AACrB,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC/BA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,gBAAgB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChGA;AACA;AACA,cAAc,mBAAO,CAAC,GAAoB;AAC1C,IAAI,mBAAO,CAAC,GAAoB;AAChC,IAAI,mBAAO,CAAC,GAAkB;AAC9B,IAAI,mBAAO,CAAC,GAAqB;AACjC;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,IAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,IAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACxCA,OAAO,mCAAmC,EAAE,mBAAO,CAAC,GAAY;AAChE;AACA;AACA;AACA;AACA,MAAM,mBAAO,CAAC,EAAsB;AACpC;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvDA,eAAe,mBAAO,CAAC,GAAY;AACnC;AACA;;;;;;UCFA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://prover/../big-random/abstract-random.js","webpack://prover/../big-random/convert.js","webpack://prover/../big-random/index.js","webpack://prover/../big-random/random.js","webpack://prover/../big-random/rc4.js","webpack://prover/./arbitrary/arbitrary-base.js","webpack://prover/./arbitrary/array.js","webpack://prover/./arbitrary/bigint.js","webpack://prover/./arbitrary/boolean.js","webpack://prover/./arbitrary/char.js","webpack://prover/./arbitrary/class.js","webpack://prover/./arbitrary/constants.js","webpack://prover/./arbitrary/convert-base-arb.js","webpack://prover/./arbitrary/dict.js","webpack://prover/./arbitrary/elements.js","webpack://prover/./arbitrary/float.js","webpack://prover/./arbitrary/index.js","webpack://prover/./arbitrary/integer.js","webpack://prover/./arbitrary/merge-dict.js","webpack://prover/./arbitrary/primitive.js","webpack://prover/./arbitrary/record.js","webpack://prover/./arbitrary/string-base.js","webpack://prover/./arbitrary/strings.js","webpack://prover/./arbitrary/tuple.js","webpack://prover/./arbitrary/union.js","webpack://prover/./arbitrary/unique-array.js","webpack://prover/./check.js","webpack://prover/./convert/array-utils.js","webpack://prover/./convert/bigint-packer.js","webpack://prover/./convert/convert-value.js","webpack://prover/./convert/index.js","webpack://prover/./convert/numeric-system.js","webpack://prover/./get-parameter.js","webpack://prover/./index.js","webpack://prover/./random/unique-random.js","webpack://prover/./wp-entry.js","webpack://prover/webpack/bootstrap","webpack://prover/webpack/before-startup","webpack://prover/webpack/startup","webpack://prover/webpack/after-startup"],"sourcesContent":["\r\nfunction makeMaskUint8(val){\r\n\tif(val >= 16){\r\n\t\tif(val >= 64){\r\n\t\t\tif(val >= 128){\r\n\t\t\t\treturn 255;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn 127;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\tif(val >= 32){\r\n\t\t\t\treturn 63;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn 31;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse{\r\n\t\tif(val >= 4){\r\n\t\t\tif(val >= 8){\r\n\t\t\t\treturn 15;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn 7;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\tif(val >= 2){\r\n\t\t\t\treturn 3;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction makeMaskUint32(val){\r\n\tif(val>=65536){\r\n\t\tif(val>=16777216){\r\n\t\t\treturn (makeMaskUint8(val>>24)<<24) | 16777215;\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn (makeMaskUint8(val>>16)<<16) | 65535;\r\n\t\t}\r\n\t}\r\n\telse{\r\n\t\tif(val>=256){\r\n\t\t\treturn (makeMaskUint8(val>>8)<<8) | 255;\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn makeMaskUint8(val);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst bigint = require('./convert.js');\r\n\r\n/*\r\nАбстрактный класс, содержащий общие функции и требующий метод randomByte, который должен быть определён в наследниках\r\n */\r\nclass AbstractRandom {\r\n\t\r\n\trandomUInt32(){\r\n\t\tconst [a, b, c, d] = Array.from({length:4}, ()=>this.randomByte());\r\n\t\t\r\n\t\treturn (((((a<<8) | b)<<8) | c)<<8)|d;\r\n\t}\r\n\r\n\trandomByteLim(max){\r\n\t\tif(max === 0){\r\n\t\t\treturn 0; //Это число выбрано совершенно случайно на отрезке [0,0]\r\n\t\t}\r\n\t\tlet mask = makeMaskUint8(max);\r\n\t\twhile(true){\r\n\t\t\tlet val = (this.randomByte() & mask);\r\n\t\t\tif(val<=max){\r\n\t\t\t\treturn val;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trandomUint32Lim(max){\r\n\t\tif(max === 0){\r\n\t\t\treturn 0; //Это число выбрано совершенно случайно на отрезке [0,0]\r\n\t\t}\r\n\t\tlet mask = makeMaskUint32(max);\r\n\t\twhile(true){\r\n\t\t\tlet val = (this.randomUInt32() & mask);\r\n\t\t\tif(val<=max){\r\n\t\t\t\treturn val;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\trandomBigUint(size){\r\n\t\tconst buffer = new ArrayBuffer(size);\r\n\t\t\r\n\t\tconst dv = new DataView(buffer);\r\n\t\t\r\n\t\tfor(let offset = size; offset--; ){\r\n\t\t\tlet val = this.randomByte();\r\n\t\t\tdv.setUint8(offset, val);\r\n\t\t}\r\n\t\t\r\n\t\tconst result = bigint.fromBuffer(buffer);\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\r\n\trandomBigUintLim(lim){\r\n\t\tif(lim === 0n){\r\n\t\t\treturn 0n; //Это число выбрано совершенно случайно на отрезке [0,0]\r\n\t\t}\r\n\t\tconst limBuffer = bigint.toBuffer(lim);\r\n\t\tconst len = limBuffer.byteLength;\r\n\t\tconst buffer = new ArrayBuffer(len);\r\n\t\t\r\n\t\tconst dvLim = new DataView(limBuffer);\r\n\t\tconst dv = new DataView(buffer);\r\n\t\t\r\n\t\tlet accept = false;\r\n\t\twhile(!accept){\r\n\t\t\tlet first = true;\r\n\t\t\tfor(let offset = len; offset--; ){\r\n\t\t\t\tif(accept){\r\n\t\t\t\t\tlet val = this.randomByte();\r\n\t\t\t\t\tdv.setUint8(offset, val);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tlet limit = dvLim.getUint8(offset);\r\n\t\t\t\t\tlet val;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(first){\r\n\t\t\t\t\t\t//До появления старшего значимого байта limit\r\n\t\t\t\t\t\tif(limit>0){\r\n\t\t\t\t\t\t\t//Старший значимый байт появился\r\n\t\t\t\t\t\t\tval = this.randomByte() & makeMaskUint8(limit);\r\n\t\t\t\t\t\t\tfirst = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tval = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tval = this.randomByte();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(val>limit){\r\n\t\t\t\t\t\tbreak; //Перезапуск генерации числа\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tdv.setUint8(offset, val);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\taccept = (val < limit || offset ===0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tconst result = bigint.fromBuffer(buffer);\r\n\t\t\r\n\t\treturn result;\r\n\t}\t\r\n}\r\n\r\nmodule.exports = AbstractRandom;","/**\r\n * LE\r\n */\r\nfunction fromBuffer(buffer){\r\n\tconst len = buffer.byteLength;\r\n\tconst dv = new DataView(buffer);\r\n\t\r\n\tlet val = 0n;\r\n\tfor(let offset = (len-1); offset >=0; --offset){\r\n\t\tval = (val<<8n) | BigInt(dv.getUint8(offset));\r\n\t}\r\n\t\r\n\treturn val;\r\n}\r\n\r\n/**\r\n * LE\r\n */\r\nfunction toBuffer(value, size){\r\n\tlet arr = [];\r\n\tconst mask = 0xFFn;\r\n\t\r\n\tfor(let i=0; value; ++i){\r\n\t\tarr[i] = value & mask;\r\n\t\tvalue = value >> 8n;\r\n\t}\r\n\t\r\n\tsize = size || arr.length;\r\n\r\n\tconst buffer = new ArrayBuffer(size);\r\n\tconst dv = new DataView(buffer);\r\n\tarr.forEach((value, i)=>{\r\n\t\tdv.setUint8(i, Number(value));\r\n\t});\r\n\t\r\n\treturn buffer;\r\n}\r\n\r\nmodule.exports = {\r\n\tfromBuffer,\r\n\ttoBuffer\r\n}","\r\nmodule.exports = {\r\n\tAbstractRandom: require('./abstract-random.js'),\r\n\t...require('./rc4.js'),\r\n\t...require('./random.js')\r\n}","const rc4 = new (require(\"./rc4.js\").RC4small);\r\n\r\nconst currentStateString = rc4.currentStateString.bind(rc4);\r\nconst setStateString = rc4.setStateString.bind(rc4);\r\nconst randomByte = rc4.randomByte.bind(rc4);\r\nconst randomUInt32 = rc4.randomUInt32.bind(rc4);\r\nconst randomByteLim    = rc4.randomByteLim.bind(rc4);\r\nconst randomUint32Lim  = rc4.randomUint32Lim.bind(rc4);\r\nconst randomBigUint    = rc4.randomBigUint.bind(rc4);\r\nconst randomBigUintLim = rc4.randomBigUintLim.bind(rc4);\r\n\t\r\nmodule.exports = {\r\n\tcurrentStateString,\r\n\tsetStateString,\r\n\trandomByte,\r\n\trandomUInt32,\r\n\trandomByteLim,\r\n\trandomUint32Lim,\r\n\trandomBigUint,\r\n\trandomBigUintLim\r\n};","\"use strict\";\r\n\r\nconst AbstractRandom = require('./abstract-random.js');\r\n\r\n// Based on RC4 algorithm, as described in\r\n// http://en.wikipedia.org/wiki/RC4\r\n\r\n/**\r\n * Меняет местами элементы массива\r\n */\r\n  function swap(s, i, j){\r\n      var tmp = s[i];\r\n      s[i] = s[j];\r\n      s[j] = tmp;\r\n  }\r\n\r\nclass AbstractRC4 extends AbstractRandom{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tconst N = this.N;\r\n\t\tlet s = Array.from({length:N}, (x, i)=>(i)); //Тождественная перестановка\r\n\r\n\t\t//Просто перемешиваю массив\r\n\t\tfor (let i = 0; i < N; i++) {\r\n\t\t\tlet j = i + Math.floor(Math.random()*(N-i));\r\n\t\t\tswap(s, i, j);\r\n\t\t}\t\t\r\n\t\t\r\n\t\tthis.i = 0;\r\n\t\tthis.j = 0;\r\n\t\tthis.s = s;\r\n\t\t\r\n\t}\r\n\t\r\n\tcurrentState(){\r\n\t\tconst {i, j, s} = this;\r\n\t\treturn {i, j, s:s.slice(0)};\r\n\t}\r\n\t\r\n\tsetState(state){\r\n\t\tconst {i, j, s} = state;\r\n\t\t\r\n\t\t\r\n\t\tthis.i = i;\r\n\t\tthis.j = j;\r\n\t\tthis.s = s.slice(0);\r\n\t}\r\n\t\r\n\trandomNative() {\r\n\t\tlet {i, j, s, N} = this;\r\n\t  \r\n\t\ti = (i + 1) % N; \r\n\t\tj = (j + s[i]) % N; \r\n\r\n\t\tswap(s, i, j);\r\n\r\n\t\tlet k = s[(s[i] + s[j]) % N];\r\n\r\n\t\tthis.i = i;\r\n\t\tthis.j = j;\r\n\t\r\n\t\treturn k;\r\n\t}\r\n\t\r\n}\r\n\r\nclass RC4 extends AbstractRC4{\r\n\t\r\n\trandomByte(){\r\n\t\treturn this.randomNative();\r\n\t}\r\n}\r\n\r\nRC4.prototype.N = 256;\r\n\r\nclass RC4small extends AbstractRC4{\r\n\t\r\n\trandomByte(){\r\n\t\tvar a = this.randomNative();\r\n\t\tvar b = this.randomNative();\r\n\r\n\t\treturn (a << 4) | b;\r\n\t}\r\n\t\r\n\tcurrentStateString() {\r\n\t\tvar {i, j, s} = this.currentState();\r\n\r\n\t\tvar res = [i,j].concat(s).map(x=>x.toString(16)).join(\"\");\r\n\t\treturn res;\r\n\t};\r\n\r\n\tsetStateString(stateString) {\r\n\t\tif (!stateString.match(/^[0-9a-f]{18}$/i)) {\r\n\t\t\tthrow new TypeError(\"RC4small stateString should be 18 hex character string\");\r\n\t\t}\r\n\t\t\r\n\t\tvar [i, j, ...s] = stateString.split(\"\").map((x)=>parseInt(x, 16));\r\n\r\n\t\tthis.setState({i, j, s});\r\n\t}\r\n\t\r\n}\r\n\r\nRC4small.prototype.N = 16;\r\n\r\nmodule.exports = {\r\n\tRC4,\r\n\tRC4small\r\n};\r\n","const Class = require('./class.js');\r\n\r\n/*\r\n * Функция генерации случайного целого, последовательно каррирующая аргументы слева.\r\n * @param maxLimit : BigInt - верхний предел генерируемого значения (включая)\r\n * @param randomLim : Function(BigInt) => BigInt - функция генерации случайного числа от нуля до аргумента (включая)\r\n * @param minLimit : BigInt=0n - нижний предел генерируемого значения\r\n */\r\nconst pregen = (maxLimit)=>(randomLim)=>(minLimit=0n)=>(randomLim(maxLimit-minLimit)+minLimit);\r\n\r\n/*\r\n * @interface IArbitrary<T>\r\n * @typeparam T - тип генерируемых случайных значений\r\n *\r\n * @property limit : BigInt - наибольший индекс возвращаемого значения\r\n *\r\n * @property size : BigInt - размер генерируемых случайных данных\r\n * size = limit + 1n\r\n *\r\n * @method generate(randomBigUintLim) - генератор случайного значения\r\n * @param randomBigUintLim : Function(BigUInt=>UBigInt) - генератор случайных значений не больше аргумента\r\n * @return T\r\n *\r\n * @method convert(index) - преобразует переданное число в значение заданного типа\r\n * @param index : BigInt & [0..limit]\r\n * @return T\r\n *\r\n * @method shrink(value) ??? - генерирует для заданного значения множество соседних значений, в направлении поиска ошибки\r\n * @param value : T\r\n * @return null | Iterable<T> - множество соседних значений\r\n *\r\n * @method all() - генерирует все значения типа T\r\n * @yields T \r\n \r\n * @method stringify(value) - преобразует значение в строку\r\n * @param value : T\r\n * @return String\r\n *\r\n */\r\n\r\nconst ArbitraryBase = Class.extend(\r\n\t{\r\n\r\n\t\tmakePregen:pregen,\r\n\t\t\r\n\t\t_extend:function(name, klass, proto){\r\n\r\n\t\t\tif(proto.limit){\r\n\t\t\t\tlet lim = BigInt(proto.limit);\r\n\t\t\t\tproto.limit = limit;\r\n\t\t\t\tproto.size = limit+1n;\r\n\t\t\t\tproto.pregen = this.makePregen(limit);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet cls = this._super(name, klass, proto);\r\n\t\t\t\r\n\t\t\tif(cls.defaultConfig){\r\n\t\t\t\tlet dflt = new cls(...cls.defaultConfig);\r\n\t\t\t\t['generate', 'convert', 'shrink', 'all', 'stringify'].forEach((key)=>{\r\n\t\t\t\t\tcls[key] = dflt.proxy(key);\r\n\t\t\t\t});\r\n\t\t\t\t['limit', 'size'].forEach((key)=>{\r\n\t\t\t\t\tcls[key] = dflt[key];\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\treturn cls;\r\n\t\t}\r\n\t}, \r\n\t{\r\n\t\t/**\r\n\t\t * Принимает предельное значение сырого случайного числа, создаёт прегенератор\r\n\t\t */\r\n\t\tinit:function(limit){\r\n\t\t\tif(limit != null){\r\n\t\t\t\ttry{\r\n\t\t\t\t\tlimit = BigInt(limit);\r\n\t\t\t\t}\r\n\t\t\t\tcatch(e){\r\n\t\t\t\t\tconsole.log(limit);\r\n\t\t\t\t\tthrow e;\r\n\t\t\t\t}\r\n\t\t\t\tthis.limit = limit;\r\n\t\t\t\tthis.size = limit+1n;\r\n\t\t\t\tthis.pregen = this.Class.makePregen(limit);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t_generate:function(randomBigUintLim){\r\n\t\t\tlet raw = this.pregen(randomBigUintLim)();\r\n\t\t\treturn this._convert(raw);\r\n\t\t},\r\n\t\t\r\n\t\tgenerate:function(randomBigUintLim){\r\n\t\t\treturn this._finalConvert(this._generate(randomBigUintLim));\r\n\t\t},\r\n\t\t\r\n\t\tconvert:function(value){\r\n\t\t\tlet raw = value.call ? value(this.limit) : value;\r\n\t\t\treturn this._finalConvert(this._convert(raw));\r\n\t\t},\r\n\t\t\r\n\t\tall:function*(){\r\n\t\t\tif(this.limit == null){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(let i=0n; i<this.size; i++){\r\n\t\t\t\tlet c = this.convert(i);\r\n\t\t\t\tyield c;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\tshrink:function(){\r\n\t\t\treturn;\r\n\t\t},\r\n\t\t\r\n\t\t_convert:function(value){\r\n\t\t\treturn value;\r\n\t\t},\r\n\t\t\r\n\t\t_finalConvert:function(value){\r\n\t\t\treturn value;\r\n\t\t},\r\n\t\t\r\n\t\tstringify:function(value){\r\n\t\t\treturn ''+value;\r\n\t\t}\r\n\t}\r\n);\r\n\r\nmodule.exports = ArbitraryBase;","\r\nconst convert = require('../convert/index.js');\r\n\r\nconst ArbitraryBase = require('./arbitrary-base.js');\r\n\r\nconst {integer} = require('./primitive.js');\r\n\r\n/**\r\n * Массив заданной длины\r\n */\r\nconst SizedArrayArb = ArbitraryBase.extend(\r\n\t{\r\n\t\tinit:function(size, type){\r\n\t\t\tif(type.call){\r\n\t\t\t\ttype = type();\r\n\t\t\t}\r\n\t\t\tthis._size = size;\r\n\t\t\tthis._type = type;\r\n\t\t\tif(type.size){\r\n\t\t\t\tlet count = convert.countWithZero(BigInt(size), type.size);\r\n\t\t\t\tlet limit = count - 1n;\r\n\t\t\t\tthis._super(limit);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis._super();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_convert: function(value){\r\n\t\t\tconst size = this._size, type = this._type;\r\n\t\t\t\r\n\t\t\tif(!type.size){\r\n\t\t\t\tthrow new Error('Array item type not has size of random');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet arr = convert.decomp(value, type.size);//.map(type.proxy('convert'));\r\n\t\t\tarr = Array.from({length:Number(size)}, (_, i)=>(type.convert(arr[i]||0)));\r\n\t\t\treturn arr;\r\n\t\t}\r\n\t}\r\n);\r\n\r\n/**\r\n * Массив длиной не больше заданной (возможно - пустой)\r\n */\r\nconst LimitedArrayArb = ArbitraryBase.extend(\r\n\t{\r\n\t\tinit:function(size, type){\r\n\t\t\tif(type.call){\r\n\t\t\t\ttype = type();\r\n\t\t\t}\r\n\t\t\tthis._size = size;\r\n\t\t\tthis._type = type;\r\n\r\n\t\t\tif(type.size){\r\n\t\t\t\tlet count = convert.countWithoutZero(BigInt(size), type.size);\r\n\t\t\t\tlet limit = count - 1n;\r\n\t\t\t\tthis._super(limit);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis._super();\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_convert: function(value){\r\n\t\t\tconst size = this._size, type = this._type;\r\n\t\t\t\r\n\t\t\tif(!type.size){\r\n\t\t\t\tthrow new Error('Array type not has size of random');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet arr = convert.decomp(value, type.size);\r\n\t\t\tarr = convert.withoutZero(arr, type.size); //Преобразование в безнулевую систему счисления, с усечением нулевого хвоста\r\n\t\t\t\r\n\t\t\tarr = arr.map((x)=>(type.convert(x-1n)));\r\n\t\t\t\r\n\t\t\treturn arr;\r\n\t\t}/*,\r\n\t\t\r\n\t\t_generate: function(){\r\n\t\t\tlet size = this.Class.pregen(BigInt(this._size))();\r\n\t\t\tlet type = this._type;\r\n\t\t\t\r\n\t\t\tlet arr = Array.from({length:Number(size)}, type.proxy('generate'));\r\n\t\t\treturn arr;\r\n\t\t}*/\r\n\t\t\r\n\t\t\r\n\t}\r\n);\r\n\r\nconst ArrayArb = ArbitraryBase.extend(\r\n\t{\r\n\t\tnewInstance:function(range, type){\r\n\t\t\tif(!type){\r\n\t\t\t\ttype = range;\r\n\t\t\t\trange = integer;\r\n\t\t\t}\r\n\t\t\tif(range.call){\r\n\t\t\t\trange = range();\r\n\t\t\t}\r\n\t\t\tif(typeof range === 'bigint'){\r\n\t\t\t\trange = Number(range);\r\n\t\t\t}\r\n\t\t\tif(typeof range === 'number'){\r\n\t\t\t\treturn new SizedArrayArb(range, type);\r\n\t\t\t}\r\n\t\t\tif(range.size){\r\n\t\t\t\tlet {min, max} = range;\r\n\t\t\t\tif(min === 0n){\r\n\t\t\t\t\treturn new LimitedArrayArb(max, type);\r\n\t\t\t\t}\r\n\t\t\t\telse if(min === max){\r\n\t\t\t\t\treturn new SizedArrayArb(max, type);\r\n\t\t\t\t}\r\n\t\t\t\trange = {min, max}; \r\n\t\t\t}\r\n\t\t\treturn this._super(range, type);\r\n\t\t}\r\n\t},\r\n\t{\t\r\n\t\tinit:function(range, type){\r\n\t\t\tif(type.call){\r\n\t\t\t\ttype = type();\r\n\t\t\t}\r\n\t\t\tconst {min, max} = range;\r\n\t\t\tthis._minsize = min;\r\n\t\t\tthis._maxsize = max;\r\n\t\t\tthis._type = type;\r\n\t\t\t\r\n\t\t\tthis._sizedPart = new SizedArrayArb(min, type);\r\n\t\t\tthis._limitedPart = new LimitedArrayArb(max - min, type);\r\n\r\n\t\t\tif(type.size){\r\n\t\t\t\tif(typeof this._limitedPart.size === 'undefined'){\r\n\t\t\t\t\tconsole.log(min, max);\r\n\t\t\t\t}\r\n\t\t\t\tlet count = this._sizedPart.size * this._limitedPart.size;\r\n\t\t\t\tlet limit = count - 1n;\r\n\t\t\t\tthis._super(limit);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis._super();\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_convert: function(value){\r\n\t\t\tif(!this._type.size){\r\n\t\t\t\tthrow new Error('Array type not has size of random');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst sizedPart = this._sizedPart, limitedPart = this._limitedPart;\r\n\t\t\t\r\n\t\t\tconst forSized = value % sizedPart.size;\r\n\t\t\tconst forLimited = value / sizedPart.size;\r\n\t\t\t\r\n\t\t\tlet arr = sizedPart.convert(forSized).concat(limitedPart.convert(forLimited));\r\n\t\t\t\r\n\t\t\treturn arr;\r\n\t\t}/*,\r\n\t\t\r\n\t\t_generate: function(){\r\n\t\t\tlet arr = this._sizedPart.generate().concat(this._limitedPart.generate());\r\n\t\t\treturn arr;\r\n\t\t}*/\r\n\t\t\r\n\t\t\r\n\t}\r\n);\r\n\r\n\r\nmodule.exports = {\r\n\tsarray:SizedArrayArb,\r\n\tlarray:LimitedArrayArb,\r\n\tarray:ArrayArb\r\n};","const MASK32 = 0xFFFFFFFF; //Часто встречается\r\nconst OVER32 = MASK32+1;\r\nconst BMASK32 = 0xFFFFFFFFn;\r\nconst BMASK52 = 0x1FFFFFFFFFFFFFn;\r\n\r\nconst convert = require('../convert/index.js');\r\n\r\nconst ArbitraryBase = require('./arbitrary-base.js');\r\n\r\n\r\nconst BigIntegerArb = ArbitraryBase.extend(\r\n\t'BigIntArbitrary',\r\n\t{defaultConfig:[]},\r\n\t{\r\n\t\tsetup:convert.ensureIntegerArgs,\r\n\t\t\r\n\t\tinit:function(min, max){\r\n\t\t\tthis.min = min;\r\n\t\t\tthis.max = max;\r\n\t\t\tthis._super(max - min);\r\n\t\t\t\r\n\t\t\tthis._convert = convert.offsetBigInt(min);\r\n\t\t}\r\n\t}\r\n);\r\n\r\n\r\nconst bigints = {};\r\n\r\n[32n, 64n, 128n].forEach((size)=>{\r\n\tlet full = 2n**size;\r\n\tbigints['biguint' + size] = new BigIntegerArb(0n, full-1n);\r\n\tlet half = full/2n;\r\n\tbigints['bigint' + size] = new BigIntegerArb(-half, half-1n);\r\n});\r\n\r\n\r\nmodule.exports = {\r\n\tbigint:BigIntegerArb,\r\n\t\r\n\t...bigints\r\n};","const ArbitraryBase = require('./arbitrary-base.js');\r\n\r\nconst BooleanArb = ArbitraryBase.extend(\r\n\t'BooleanArbitrary',\r\n\t{defaultConfig:[]},\r\n\t{\r\n\t\tinit:function(){\r\n\t\t\tthis._super(1);\r\n\t\t},\r\n\t\t\r\n\t\t_convert:function(value){\r\n\t\t\treturn !!value;\r\n\t\t}\r\n\t}\r\n);\r\n\r\nmodule.exports = BooleanArb;","const {\r\n\tinteger,\r\n\tuint8,\r\n\tuint16\r\n} = require('./primitive.js');\r\n\r\nconst cnst = require('./constants.js');\r\nconst union = require('./union.js');\r\n\r\nconst octet = uint8;\r\nconst ascii = integer(32,0xFE);\r\n\r\nconst digit = integer(0x30, 0x39);\r\n\r\nconst latUp = integer(0x41, 0x5A);\r\nconst latLow = integer(0x61, 0x7A);\r\n\r\nconst rusUp = union([cnst(0x401), integer(0x410,0x42F)]);\r\nconst rusLow = union([integer(0x430, 0x44F), cnst(0x451)]);\r\n\r\nconst lat = union([latUp, latLow]);\r\n\r\nconst rus = union([rusUp, rusLow]);\r\n\r\nconst _ = cnst(\"_\".codePointAt(0));\r\nconst $ = cnst(\"$\".codePointAt(0));\r\n\r\nconst identLeader = union([latUp, latLow, _, $]);\r\n\r\nconst identBody = union([digit, latUp, latLow, _, $]);\r\n\r\nmodule.exports = {\r\n\toctet,\r\n\tascii,\r\n\tdigit,\r\n\tlat,\r\n\tlatUp,\r\n\tlatLow,\r\n\trus,\r\n\trusUp,\r\n\trusLow,\r\n\tidentLeader,\r\n\tidentBody\r\n};","\t// if we are initializing a new class\r\n\tvar initializing = false,\r\n        //point = '.',\r\n\t\t//noop = function(){},\r\n\t\tisFunction = (fun)=>(fun && fun.call),\r\n\t\tisArray = Array.isArray,\r\n\t\textend = Object.assign,\r\n        toStringStr = 'toString',\r\n        valueOfStr = 'valueOf',\r\n\r\n\t\t// tests if we can get super in .toString()\r\n\t\tfnTest = /xyz/.test(function() {\r\n\t\t\treturn 'xyz'; //Old one was fucked up by GCC\r\n\t\t}) ? /\\b_super\\b/ : /.*/;\r\n\r\n\t\r\n\tfunction ownKeys(newProps){\r\n\t\tif(!newProps){\r\n\t\t\treturn [];\r\n\t\t}\r\n\t\t\r\n\t\tlet keys = Object.keys(newProps);\r\n\t\t\r\n\t\t//Take care of toString method\r\n\t\tif(!keys.includes(toStringStr) && newProps.hasOwnProperty(toStringStr)){\r\n\t\t\tkeys.push(toStringStr);\r\n\t\t}\r\n\r\n\t\t//Take care of valueOf method\r\n\t\tif(!keys.includes(valueOfStr) && newProps.hasOwnProperty(valueOfStr)){\r\n\t\t\tkeys.push(valueOfStr);\r\n\t\t}\r\n\t\t\r\n\t\treturn keys;\r\n\t}\r\n\r\n\t// overwrites an object with methods, sets up _super\r\n\t// newProps - new properties\r\n\t// oldProps - where the old properties might be\r\n\t// addTo - what we are adding to\r\n\tvar inheritProps = function( newProps, oldProps, addTo ) {\r\n\t\tvar wrapSuper = function( name, fn ) {\r\n\t\t\treturn function() {\r\n\t\t\t\tvar tmp = this._super,\r\n\t\t\t\t\t\tret;\r\n\r\n\t\t\t\t// Add a new ._super() method that is the same method\r\n\t\t\t\t// but on the super-class\r\n\t\t\t\tthis._super = oldProps[name];\r\n\r\n\t\t\t\t// The method only need to be bound temporarily, so we\r\n\t\t\t\t// remove it when we're done executing\r\n\t\t\t\tret = fn.apply(this, arguments);\r\n\t\t\t\tthis._super = tmp;\r\n\t\t\t\treturn ret;\r\n\t\t\t};\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\tfor (let name of ownKeys(newProps) ) {\r\n\t\t\t// Check if we're overwriting an existing function\r\n\t\t\taddTo[name] = isFunction(newProps[name]) && \r\n\t\t\t\t\t\t  isFunction(oldProps[name]) && \r\n\t\t\t\t\t\t  fnTest.test(newProps[name]) ? wrapSuper(name, newProps[name]) : newProps[name];\r\n\t\t}\r\n\r\n\t};\r\n\r\n\r\n\tvar clss = function AnonimousClass() {\r\n\t\tif (arguments.length) {\r\n\t\t\tclss.extend.apply(clss, arguments);\r\n\t\t}\r\n\t};\r\n\r\n\t/* @Static*/\r\n\textend(clss, {\r\n\t\tproxy: function( funcs ) {\r\n\r\n\t\t\t//args that should be curried\r\n\t\t\tvar args = Array.from(arguments),\r\n\t\t\t\tself;\r\n\r\n\t\t\tfuncs = args.shift();\r\n\r\n\t\t\tif (!isArray(funcs) ) {\r\n\t\t\t\tfuncs = [funcs];\r\n\t\t\t}\r\n\r\n\t\t\tself = this;\r\n\t\t\t//!steal-remove-start\r\n\t\t\tfor( var i =0; i< funcs.length;i++ ) {\r\n\t\t\t\tif(typeof funcs[i] == \"string\" && !isFunction(this[funcs[i]])){\r\n\t\t\t\t\tthrow (\"does not have a \"+funcs[i]+\"method!\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//!steal-remove-end\r\n\t\t\treturn function class_cb(...a) {\r\n\t\t\t\tvar cur = args.concat(a),\r\n\t\t\t\t\tisString, \r\n\t\t\t\t\tlength = funcs.length,\r\n\t\t\t\t\tf = 0,\r\n\t\t\t\t\tfunc;\r\n\r\n\t\t\t\tfor (; f < length; f++ ) {\r\n\t\t\t\t\tfunc = funcs[f];\r\n\t\t\t\t\tif (!func ) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tisString = typeof func == \"string\";\r\n\t\t\t\t\tif ( isString && self._set_called ) {\r\n\t\t\t\t\t\tself.called = func;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcur = (isString ? self[func] : func).apply(self, cur || []);\r\n\t\t\t\t\tif ( f < length - 1 ) {\r\n\t\t\t\t\t\tcur = !isArray(cur) || cur._use_call ? [cur] : cur\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn cur;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tnewInstance: function(...argumentsCopy) {\r\n\t\t\tvar inst = this.rawInstance(),\r\n\t\t\t\targs;\r\n\r\n\t\t\tif ( inst.setup ) {\r\n\t\t\t\targs = inst.setup(...argumentsCopy);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!isArray(args)){\r\n\t\t\t\targs = argumentsCopy;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif ( inst.init ) {\r\n\t\t\t\tinst.init(...args);\r\n\t\t\t}\r\n\r\n\t\t\treturn inst;\r\n\t\t},\r\n\r\n\t\tsetup: function(...args) {\r\n\t\t\treturn args;\r\n\t\t},\r\n\t\trawInstance: function() {\r\n\t\t\tinitializing = true;\r\n\t\t\tvar inst = new this();\r\n\t\t\tObject.defineProperty(inst, '_super', {writable:true});\r\n\t\t\tinitializing = false;\r\n\t\t\treturn inst;\r\n\t\t},\r\n\r\n\t\textend: function(name, klass, proto ) {\r\n\t\t\tif(typeof name !== 'string'){\r\n\t\t\t\tproto = klass;\r\n\t\t\t\tklass = name;\r\n\t\t\t\tname = this.name || 'AnonimousClass';\r\n\t\t\t}\r\n\t\t\t// figure out what was passed\r\n\t\t\tif (!proto ) {\r\n\t\t\t\tproto = klass;\r\n\t\t\t\tklass = undefined;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn this._extend(name, klass, proto);\r\n\t\t},\r\n\t\t\r\n\t\t_extend: function(name, klass, proto){\r\n\t\t\tproto = proto || {};\r\n\t\t\tvar _super_class = this,\r\n\t\t\t\t_super = this.prototype,\r\n\t\t\t\t_prototype, parts, current;\r\n\r\n\t\t\t// Instantiate a base class (but only create the instance,\r\n\t\t\t// don't run the init constructor)\r\n\t\t\tinitializing = true;\r\n\t\t\t_prototype = new this();\r\n\t\t\tinitializing = false;\r\n\t\t\t// Copy the properties over onto the new prototype\r\n\t\t\tinheritProps(proto, _super, _prototype);\r\n\r\n\t\t\t// The dummy class constructor\r\n\r\n\t\t\tfunction Class(...args) {\r\n\t\t\t\t// All construction is actually done in the init method\r\n\t\t\t\tif ( initializing ) return;\r\n\r\n\t\t\t\tif ( !(this && this.constructor === Class) ) { //we are being called w/o new\r\n\t\t\t\t\treturn Class.newInstance(...args)\r\n\t\t\t\t\t//return arguments.callee.extend.apply(arguments.callee, arguments)\r\n\t\t\t\t} else { //we are being called w/ new\r\n\t\t\t\t\treturn this.Class.newInstance(...args)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tObject.defineProperty(Class, 'name', {value:name});\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tObject.setPrototypeOf(Class, this);\r\n\t\t\t\r\n\t\t\t// copy new props on class\r\n\t\t\tinheritProps(klass, this, Class);\r\n\r\n\t\t\tClass.prototype = _prototype;\r\n\r\n\t\t\t//make sure our prototype looks nice\r\n\t\t\tClass.prototype.Class = Class.prototype.constructor = Class;\r\n\r\n\r\n\t\t\tvar args = Class.setup(_super_class, name, klass, proto) || [];\r\n\r\n\t\t\tif ( Class.init ) {\r\n\t\t\t\tClass.init(...args);\r\n\t\t\t}\r\n\r\n\t\t\t/* @Prototype*/\r\n\t\t\treturn Class;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\r\n\r\n\r\n\r\n\tclss.prototype.proxy = clss.proxy;\r\n\r\nmodule.exports = clss;","\r\nconst convert = require('../convert/index.js');\r\n\r\nconst ArbitraryBase = require('./arbitrary-base.js');\r\n\r\nconst ConstArb = ArbitraryBase.extend(\r\n\t'ConstArbitrary',\r\n\t{\r\n\t\tinit:function(value){\r\n\t\t\tthis._value = value;\r\n\t\t\tthis._super(0);\r\n\t\t},\r\n\r\n\t\t\r\n\t\t_convert: function(value){\r\n\t\t\tif(value != 0n){\r\n\t\t\t\tthrow new RangeError('Error convert to const');\r\n\t\t\t}\r\n\t\t\treturn this._value;\r\n\t\t},\r\n\t\t\r\n\t\t_generate: function(){\r\n\t\t\treturn this._value;\r\n\t\t}\r\n\t}\r\n);\r\n\r\n\r\nmodule.exports = ConstArb;","\r\nconst ArbitraryBase = require('./arbitrary-base.js');\r\n\r\n/**\r\n * Абстрактная обёртка\r\n * Чтобы использовать, надо определить _finalConvert\r\n */\r\nconst ConvertBaseArb = ArbitraryBase.extend(\r\n\t{\r\n\t\t/**\r\n\t\t * @param arb : TupleArb|ArrayArb - генератор массива (возможно многоуровневого) кодовых точек\r\n\t\t */\r\n\t\tinit:function(arb){\r\n\t\t\tif(arb.call){\r\n\t\t\t\tarb = arb();\r\n\t\t\t}\r\n\t\t\tthis._arb = arb;\r\n\t\t\tif(arb.size){\r\n\t\t\t\tthis._super(arb.limit);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis._super();\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t_convert: function(value){\r\n\t\t\treturn this._arb.convert(value);\r\n\t\t},\r\n\t\t\r\n\t\t_generate: function(randomBigUintLim){\r\n\t\t\treturn this._arb.generate(randomBigUintLim);\r\n\t\t}\r\n\t}\r\n);\r\n\r\nmodule.exports = ConvertBaseArb;","\r\nconst ArbitraryBase = require('./arbitrary-base.js');\r\nconst uarray = require('./unique-array.js');\r\n\r\n\r\nconst DictArb = ArbitraryBase.extend(\r\n\t'DictArbitrary',\r\n\t{\r\n\t\tinit:function(size, keys, type){\r\n\t\t\tthis._size = size;\r\n\t\t\tthis._keys = keys;\r\n\t\t\tthis._type = type;\r\n\t\t\tthis._super();\r\n\t\t},\r\n\r\n\t\t\r\n\t\t_generate: function(randomBigUintLim){\r\n\t\t\tlet keys = uarray(this._size, this._keys).generate(randomBigUintLim)\r\n\t\t\t\r\n\t\t\tlet fields = keys.map((key)=>([key, this._type.generate(randomBigUintLim)]));\r\n\t\t\t\r\n\t\t\treturn Object.fromEntries(fields);\r\n\t\t}\r\n\t}\r\n);\r\n\r\n\r\nmodule.exports = DictArb;","const ArbitraryBase = require('./arbitrary-base.js');\r\n\r\n/**\r\n * Случайный выбор одного из элементов массива\r\n */\r\n\r\nconst ElementArb = ArbitraryBase.extend(\r\n\t'ElementsArbitrary',\r\n\t{\r\n\t\tinit:function(arr){\r\n\t\t\tthis._elements = arr;\r\n\t\t\tlet limit = arr.length-1;\r\n\t\t\tthis._super(limit);\r\n\t\t},\r\n\t\t\r\n\t\t_convert:function(value){\r\n\t\t\treturn this._elements[value];\r\n\t\t}\r\n\t}\r\n);\r\n\r\nmodule.exports = ElementArb;","const MASK32 = 0xFFFFFFFF; //Часто встречается\r\nconst OVER32 = MASK32+1;\r\nconst BMASK32 = 0xFFFFFFFFn;\r\nconst BMASK52 = 0x1FFFFFFFFFFFFFn;\r\n\r\nconst convert = require('../convert/index.js');\r\n\r\nconst ArbitraryBase = require('./arbitrary-base.js');\r\n\r\n\r\nconst SimpleFloatArbBase = ArbitraryBase.extend(\r\n\t{\r\n\t\tdefaultConfig:[],\r\n\t\t\r\n\t\textend:function(opendown, openup){\r\n\t\t\tconst toFloat = convert.uint32ToFloat(opendown, openup);\r\n\t\t\t\r\n\t\t\treturn this._super(\r\n\t\t\t\t{}, \r\n\t\t\t\t{\r\n\t\t\t\t\ttoFloat: toFloat\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t},\r\n\t\r\n\t{\r\n\t\tinit:function(min, max){\r\n\t\t\t[min, max] = convert.ensureFloatArgs(min, max);\r\n\t\t\tthis._super(0xFFFFFFFFn);\r\n\t\t\tthis._min = min;\r\n\t\t\tthis._max = max;\r\n\t\t\tthis.expandFloat = convert.expandFloat(min, max);\r\n\t\t},\r\n\t\t\r\n\t\t_convert:function(value){\r\n\t\t\tconst f = this.toFloat(value);\r\n\t\t\treturn this.expandFloat(f);\r\n\t\t}\r\n\t}\r\n);\r\n\r\nconst O_O = SimpleFloatArbBase.extend(true, true);\r\nconst O_I = SimpleFloatArbBase.extend(true, false);\r\nconst I_I = SimpleFloatArbBase.extend(false, false);\r\nconst I_O = SimpleFloatArbBase.extend(false, true);\r\n\r\n\r\nmodule.exports = {\r\n\t\r\n\t'float':I_O,\r\n\ti_i:I_I,\r\n\ti_o:I_O,\r\n\to_i:O_I,\r\n\to_o:O_O\r\n};","\r\nmodule.exports = {\r\n\tArbitraryBase:require('./arbitrary-base.js'),\r\n\tConvertBase:require('./convert-base-arb.js'),\r\n\t...require('./array.js'),\r\n\t...require('./primitive.js'),\r\n\t...require('./char.js'),\r\n\t...require('./strings.js'),\r\n\tdict:require('./dict.js'),\r\n\trecord:require('./record.js'),\r\n\ttuple:require('./tuple.js'),\r\n\tunion:require('./union.js'),\r\n\tuarray:require('./unique-array.js'),\r\n\tmerge:require('./merge-dict.js')\r\n};","const MASK32 = 0xFFFFFFFF; //Часто встречается\r\nconst OVER32 = MASK32+1;\r\nconst BMASK32 = 0xFFFFFFFFn;\r\nconst BMASK52 = 0x1FFFFFFFFFFFFFn;\r\n\r\nconst convert = require('../convert/index.js');\r\n\r\nconst ArbitraryBase = require('./arbitrary-base.js');\r\n\r\nconst IntegerArb = ArbitraryBase.extend(\r\n\t{defaultConfig:[]},\r\n\t{\r\n\t\tsetup:convert.ensureIntegerArgs,\r\n\t\t\r\n\t\tinit:function(min, max){\r\n\t\t\tthis.min = min;\r\n\t\t\tthis.max = max;\r\n\t\t\tthis._super(max - min);\r\n\r\n\t\t\tthis._convert = convert.offsetInt(min);\r\n\t\t},\r\n\t\t\r\n\t\tresize: function(fun){\r\n\t\t\tlet [min, max] = fun(this.min, this.max);\r\n\t\t\t\r\n\t\t\treturn new IntegrArb(min, max);\r\n\t\t}\r\n\t}\r\n);\r\n\r\nconst NatArb = IntegerArb.extend(\r\n\t{\r\n\t\tsetup:function(max){\r\n\t\t\treturn [0, max || MASK32];\r\n\t\t}\r\n\t}\r\n);\r\n\r\nconst PositArb = IntegerArb.extend(\r\n\t{\r\n\t\tsetup:function(max){\r\n\t\t\treturn [1, max || MASK32];\r\n\t\t}\r\n\t}\r\n);\r\n\r\nconst ints = {};\r\n[8, 16, 32].forEach((size)=>{\r\n\tlet full = 2**size;\r\n\tints['uint' + size] = new IntegerArb(0, full-1);\r\n\tlet half = full/2;\r\n\tints['int' + size] = new IntegerArb(-half, half-1);\r\n});\r\n\r\n\r\n\r\nmodule.exports = {\r\n\tIntegerArb,\r\n\tinteger:IntegerArb,\r\n\tnat:NatArb,\r\n\tposit:PositArb,\r\n\t\r\n\t...ints\r\n};","\r\nconst ArbitraryBase = require('./arbitrary-base.js');\r\nconst ConvertBase = require('./convert-base-arb.js');\r\n\r\n/**\r\n * Оборачивает кортеж записей или словарей, сливает поля результата в один объект\r\n */\r\n \r\nconst MergeDict = ConvertBase.extend(\r\n\t{\r\n\t\t_finalConvert: function(value){\r\n\t\t\tlet result = {};\r\n\t\t\tObject.assign(result, ...value);\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n);\r\n\r\nmodule.exports = MergeDict;","\r\n\r\nconst BooleanArb = require('./boolean.js');\r\nconst bool = new BooleanArb();\r\n\r\nconst cnst = require('./constants.js');\r\n\r\n\r\nmodule.exports = {\r\n\tbool,\r\n\tcnst,\r\n\tconstants:cnst,\r\n\t'const':cnst,\r\n\telements:require('./elements.js'),\r\n\t...require('./integer.js'),\r\n\t...require('./bigint.js'),\r\n\t...require('./float.js')\r\n};","\r\nconst ArbitraryBase = require('./arbitrary-base.js');\r\n\r\nconst RecordArb = ArbitraryBase.extend(\r\n\t{\r\n\t\tinit:function(fields){\r\n\t\t\tthis._fields = Object.entries(fields);\r\n\t\t},\r\n\r\n\t\t\r\n\t\t_generate: function(randomBigUintLim){\r\n\t\t\tlet fields = this._fields.map(([key, arb])=>([key, arb.generate(randomBigUintLim)]));\r\n\t\t\r\n\t\t\treturn Object.fromEntries(fields);\r\n\t\t}\r\n\t}\r\n);\r\n\r\n\r\nmodule.exports = RecordArb;","\r\nconst ArbitraryBase = require('./arbitrary-base.js');\r\nconst ConvertBase = require('./convert-base-arb.js');\r\n\r\nconst StringArb = ConvertBase.extend(\r\n\t{\r\n\t\t_finalConvert: function(value){\r\n\t\t\tvalue = value.flat(Infinity);\r\n\t\t\treturn String.fromCodePoint(...value);\r\n\t\t}\r\n\t}\r\n);\r\n\r\nmodule.exports = StringArb;","const string = require('./string-base.js');\r\nconst tuple = require('./tuple.js');\r\nconst {array} = require('./array.js');\r\nconst union = require('./union.js');\r\nconst chars = require('./char.js');\r\n\r\nconst ident = function(size){\r\n\tif(size.call){\r\n\t\tsize = size();\r\n\t}\r\n\tif(size.resize){\r\n\t\tsize = size.resize((min, max)=>([min-1, max-1]));\r\n\t}\r\n\telse{\r\n\t\tsize = size-1;\r\n\t}\r\n\treturn string(tuple([chars.identLeader, array(size, chars.identBody)]));\r\n};\r\n\r\nmodule.exports = {\r\n\tstring,\r\n\tident\r\n};","\r\nconst ArbitraryBase = require('./arbitrary-base.js');\r\nconst {BigIntPacker} = require('../convert/index.js');\r\n\r\nconst TupleArb = ArbitraryBase.extend(\r\n\t'TupleArbitrary',\r\n{\r\n\t\tinit:function(arbs){\r\n\t\t\tarbs = arbs.map((a)=>(a.call ? a() : a));\r\n\t\t\tthis._fields = arbs;\r\n\t\t\tif(arbs.every(a=>(a.size))){\r\n\t\t\t\tlet count = arbs.reduce((akk, a)=>(akk*a.size), 1n);\r\n\t\t\t\tthis._super(count-1n);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis._super();\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t_convert: function(value){\r\n\t\t\tconst pack = new BigIntPacker(value);\r\n\t\t\t\r\n\t\t\tlet arr = this._fields.map((arb)=>{\r\n\t\t\t\tlet val = pack.pop(arb.size);\r\n\t\t\t\treturn arb.convert(val);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn arr;\r\n\t\t},\r\n\t\t\r\n\t\t_generate: function(randomBigUintLim){\r\n\t\t\tif(this.pregen){\r\n\t\t\t\treturn this._super(randomBigUintLim);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn this._fields.map((arb)=>(arb.generate(randomBigUintLim)));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n);\r\n\r\n\r\nmodule.exports = TupleArb;","\r\nconst convert = require('../convert/index.js');\r\n\r\nconst ArbitraryBase = require('./arbitrary-base.js');\r\n\r\nconst UnionArb = ArbitraryBase.extend(\r\n\t{\r\n\t\tinit:function(arbs){\r\n\t\t\tarbs = arbs.map((a)=>(a.call ? a() : a));\r\n\t\t\tthis._fields = arbs;\r\n\t\t\tif(arbs.every(a=>(a.size))){\r\n\t\t\t\tlet count = arbs.reduce((akk, a)=>(akk+a.size), 0n);\r\n\t\t\t\tthis._super(count-1n);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis._super();\r\n\t\t\t}\t\t\t\r\n\t\t},\r\n\r\n\t\t_convert: function(value){\r\n\t\t\tlet arbs = this._fields, len = arbs.length;\r\n\t\t\tfor(let i=0; i<=len; ++i){\r\n\t\t\t\tlet arb = arbs[i];\r\n\t\t\t\tif(value > arb.limit){\r\n\t\t\t\t\tvalue -= arb.size;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\treturn arb.convert(value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow new Error('Неправильно посчитано количество данных в Union');\r\n\t\t}\r\n\t\t\r\n\t}\r\n);\r\n\r\n\r\nmodule.exports = UnionArb ;","\r\nconst convert = require('../convert/index.js');\r\n\r\nconst  {\r\n\tuniqueRandom\r\n} = require('../random/unique-random.js');\r\n\r\nconst ArbitraryBase = require('./arbitrary-base.js');\r\n\r\nconst UArrayArb = ArbitraryBase.extend(\r\n\t{\r\n\t\tinit:function(size, type){\r\n\t\t\tif(type.call){\r\n\t\t\t\ttype = type();\r\n\t\t\t}\r\n\t\t\tif(size.call){\r\n\t\t\t\tsize = size();\r\n\t\t\t}\r\n\t\t\tthis._size = size;\r\n\t\t\tif(!type.size){\r\n\t\t\t\tthrow new TypeError('A type ' + type + ' is not support unique');\r\n\t\t\t}\r\n\t\t\tthis._type = type;\r\n\t\t\tthis._super();\r\n\t\t},\r\n\r\n\t\t_generate: function(randomBigUintLim){\r\n\t\t\tlet size = this._size, type = this._type;\r\n\t\t\tif(size.generate){\r\n\t\t\t\tsize = size.generate(randomBigUintLim);\r\n\t\t\t}\r\n\t\t\tlet raw = uniqueRandom(BigInt(size), type.pregen(randomBigUintLim));\r\n\t\t\t\r\n\t\t\treturn raw.map(type.proxy('convert'));\r\n\t\t}\r\n\t}\r\n);\r\n\r\nmodule.exports = UArrayArb;","const {RC4small} = require('@grunmouse/big-random');\r\n\r\nconst random = new RC4small();\r\n\r\nconst randomBigUintLim = random.randomBigUintLim.bind(random);\r\n\r\nconst findParameter = require('./get-parameter.js');\r\n\r\nconst TupleArb = require('./arbitrary/tuple.js');\r\n\r\nconst InnerTuple = TupleArb.extend({});\r\n\r\nfunction doThrow(fun, arg){\r\n\ttry{\r\n\t\tfun(arg);\r\n\t}\r\n\tcatch(e){\r\n\t\treturn e;\r\n\t}\r\n}\r\n\r\nfunction check(arbitrary, property){\r\n\t/*\r\n\t Здесь что-нибудь про инициализацию\r\n\t \t\r\n\t random.setStateString\r\n\t*/\r\n\t\r\n\t{\r\n\t\tlet rndState = findParameter('proverRndState');\r\n\t\tif(rndState){\r\n\t\t\trandom.setStateString(rndState);\r\n\t\t}\r\n\t}\r\n\t\r\n\tlet count = 100;\r\n\tlet firstValue, firstError;\r\n\tlet rndState; //Состояние перед вызовом последнего\r\n\t\r\n\tfor(let i=0; i<count; ++i){\r\n\t\trndState = random.currentStateString();\r\n\t\tfirstValue = arbitrary.generate(randomBigUintLim);\r\n\t\ttry{\r\n\t\t\tlet result;\r\n\t\t\tif(arbitrary instanceof InnerTuple){\r\n\t\t\t\tresult = property(...firstValue);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tresult = property(firstValue);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(result && result.err){\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(e){\r\n\t\t\tfirstError = e;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\t\r\n\tif(!firstError){\r\n\t\treturn {\r\n\t\t\t\r\n\t\t};\r\n\t}\r\n\t\r\n\t/*\r\n\tПриняв firstValue за корень\r\n\tнаходя дочерние элементы методом arbitrary.shrink(value)\r\n\tнайти глубину поддерева, вызывающего ошибку, и соответствующий ей самый глубокий узел\r\n\t*/\r\n\t\r\n\tconst gray = new Set(), black = new Set();\r\n\tconst stack = [[firstValue,firstError,0]];\r\n\tlet lastLevel = 0, lastValue = firstValue, lastError = firstError;\r\n\twhile(stack.length){\r\n\t\tlet [value, err, level] = stack[stack.length-1];\r\n\t\tif(black.has(value)){\r\n\t\t\tstack.pop();\r\n\t\t}\r\n\t\telse if(gray.has(value)){\r\n\t\t\tblack.add(value);\r\n\t\t\tstack.pop();\r\n\t\t}\r\n\t\telse{\r\n\t\t\tgray.add(value);\r\n\t\t\tlet items = arbitrary.shrink(value);\r\n\t\t\tif(!items || !items[Symbol.iterator]){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tfor(let value of items){\r\n\t\t\t\tlet err;\r\n\t\t\t\ttry{\r\n\t\t\t\t\tif(arbitrary instanceof InnerTuple){\r\n\t\t\t\t\t\tproperty(...firstValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tproperty(firstValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch(e){\r\n\t\t\t\t\terr = e;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif(err){\r\n\t\t\t\t\tstack.push([value, err, level+1]);\r\n\t\t\t\t\tif(level+1 > lastLevel){\r\n\t\t\t\t\t\tlastLevel = level+1;\r\n\t\t\t\t\t\tlastValue = value;\r\n\t\t\t\t\t\tlastError = error;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\tlastError.message = `Property failed with rndState:${random.currentStateString()}\\n\\t` + lastError.message;\r\n\t\r\n\treturn {\r\n\t\terr:lastError,\r\n\t\tvalue:lastValue,\r\n\t\trndState: rndState\r\n\t}\r\n\t\r\n}\r\n\r\n/*\r\nПредполагается, что последним аргументом идёт функция обратного вызова, а перед ней -\r\n\t- аргументы, описывающие генерируемые значения, которые потом передадутся в эту функцию\r\n\r\n\t\r\n*/\r\nfunction curryCheck(args){\r\n\tconst property = args.pop();\r\n\tconst arbs = args;\r\n\tconst arbitrary = arbs.length>1 ? new InnerTuple(arbs) : arbs[0];\r\n\tif(!arbitrary){\r\n\t\tthrow new Error('No arbitrary');\r\n\t}\r\n\r\n\treturn function(){\r\n\t\treturn check(arbitrary, property);\r\n\t};\r\n}\r\n\r\n/**\r\n * @param func : Function(name, checker) - функция, оборачивающая вызов библиотечной функции проверки\r\n * @return Function(name, ...arbitrary, property)\r\n *\t\t@param name : String\r\n *\t\t@param ...arbitrary : Arbitrary - одно или несколько генерируемых значений\r\n *\t\t@param property : Function(...values) - функция, проверяющая условие\r\n */\r\nfunction wrapFuncForProps(func){\r\n\treturn function property(name, ...args){\r\n\t\treturn func(name, curryCheck(args));\r\n\t}\r\n}\r\n\r\nconst propertyMocha = wrapFuncForProps(function(name, checker){\r\n\tit(name, function(){\r\n\t\tlet res = checker();\r\n\t\tif(res && res.err){\r\n\t\t\tlet test = this.test;\r\n\t\t\t/*\r\n\t\t\tчто-нибудь про вывод в файл\r\n\t\t\t[test.file, test.fullTitle(), res.rndState, res.value, res.err]\r\n\t\t\t*/\r\n\t\t\tthrow res.err;\r\n\t\t}\r\n\t});\r\n});\r\n\r\nmodule.exports = {\r\n\tcheck,\r\n\twrapFuncForProps,\r\n\tproperty:propertyMocha,\r\n\trandom,\r\n\trandomBigUintLim\r\n};","\r\nconst increasingSorter = (a,b)=>(+(b<a)-(a<b));\r\nconst decreasingSorter = (a,b)=>(+(b>a)-(a>b));\r\n\r\nfunction makeSorterBy(fun, sorter){\r\n\treturn (a,b)=>sorter(fun(a),fun(b));\r\n}\r\n\r\n\r\n/**\r\n * Транспонировать массив массивов, полагая, что они одной длины\r\n */\r\nfunction transposeArrays(data){\r\n\tlet m = data.length, n = data[0].length;\r\n\tlet result = Array.from({length:n}, ()=>([]));\r\n\t\r\n\tfor(let i = 0; i<n; ++i){\r\n\t\tfor(let j = 0; j<m; j++){\r\n\t\t\tresult[i][j] = data[j][i];\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Удлинить массив до заданного значения, размножая его элементы, но сохраняя порядок\r\n */\r\nfunction repeateItems(arr, nlen){\r\n\tlet len = arr.length;\r\n\tif(len === nlen){\r\n\t\treturn arr;\r\n\t}\r\n\tlet mul = nlen/len;\r\n\tlet result = [];\r\n\tfor(let i=0; i<nlen; ++i){\r\n\t\tlet k = Math.floor(i/mul);\r\n\t\tresult[i] = arr[k];\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nmodule.exports = {\r\n\tincreasingSorter,\r\n\tdecreasingSorter,\r\n\tmakeSorterBy,\r\n\t\r\n\ttransposeArrays,\r\n\trepeateItems\r\n};","\r\nclass BigIntPacker{\r\n\tconstructor(value){\r\n\t\tthis.value = value;\r\n\t}\r\n\t\r\n\tvalueOf(){\r\n\t\treturn this.value;\r\n\t}\r\n\t\r\n\tpush(base, mod){\r\n\t\tif(mod >= base){\r\n\t\t\tthrow new RangeError('Слишком большое здачения для данного основанияы');\r\n\t\t}\r\n\t\tif(base == 1n){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.value = this.value*base + mod;\r\n\t}\r\n\t\r\n\tpop(base){\r\n\t\tif(base == 1n){\r\n\t\t\treturn 0n;\r\n\t\t}\r\n\t\tlet mod = this.value % base;\r\n\t\tthis.value = this.value / base;\r\n\t\t\r\n\t\treturn mod;\r\n\t}\r\n}\r\n\r\nmodule.exports = BigIntPacker;","const MASK32 = 0xFFFFFFFF; //Часто встречается\r\nconst OVER32 = MASK32+1;\r\nconst BMASK32 = 0xFFFFFFFFn;\r\nconst BMASK52 = 0x1FFFFFFFFFFFFFn;\r\n\r\n/***\r\n * Исправляет верхний и нижний целый предел\r\n */\r\nfunction ensureIntegerArgs(a, b){\r\n\tif(typeof b == 'undefined'){\r\n\t\tb = a;\r\n\t\ta = 0;\r\n\t\tif(typeof b == 'undefined'){\r\n\t\t\tb = MASK32;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn [a, b];\r\n}\r\n\r\n/***\r\n * Исправляет верхний и нижний числовой предел\r\n */\r\nfunction ensureFloatArgs(a, b){\r\n\tif(typeof b == 'undefined'){\r\n\t\tb = a;\r\n\t\ta = 0;\r\n\t\tif(typeof b == 'undefined'){\r\n\t\t\tb = 1;\r\n\t\t}\r\n\t}\r\n\r\n\treturn [a, b];\r\n}\r\n\r\n/***\r\n * Исправляет статус включения верхнего и нижнего пределов\r\n */\r\nfunction ensureFloatLim(opendown, openup){\r\n\topendown = (opendown === true);\r\n\topenup = (openup !== false);\r\n\t\r\n\treturn [opendown, openup];\r\n}\r\n\r\n/***\r\n * @function uint32ToFloat\r\n * @param opendown? : Boolean=false - открытый снизу\r\n * @param openup? : Boolean=true - открытый снизу\r\n * @return Function<number, number> - преобразует целое число [0, 0xFFFFFFFF] в действительное 0..1 с принятым включением пределов\r\n */\r\nfunction uint32ToFloat(opendown, openup){\r\n\topendown = (opendown === true);\r\n\topenup = (openup !== false);\r\n\tconst a = 0 + opendown;\r\n\tconst d = MASK32 + openup + a;\r\n\r\n\treturn (intval)=>((a + intval)/d);\r\n}\r\n\r\n/***\r\n * @function expandFloat\r\n * @param a\r\n * @param b\r\n * @return Function<number, number> - преобразует число из отрезка [0;1] в отрезок [a;b]\r\n */\r\nfunction expandFloat(a, b){\r\n\t[a,b] = ensureFloatArgs(a, b);\r\n\treturn (value)=>(a + value*(b-a));\r\n}\r\n\r\nfunction offsetInt(offset){\r\n\toffset = Number(offset);\r\n\treturn (value)=>(Number(value)+offset);\r\n}\r\n\r\nfunction offsetBigInt(offset){\r\n\toffset = BigInt(offset);\r\n\treturn (value)=>(BigInt(value)+offset);\r\n}\r\n\r\nfunction offsetValue(offset, T){\r\n\toffset = T(offset);\r\n\treturn (value)=>(T(value)+offset);\r\n}\r\n\r\nmodule.exports = {\r\n\tuint32ToFloat,\r\n\texpandFloat,\r\n\toffsetInt,\r\n\toffsetBigInt,\r\n\toffsetValue,\r\n\t\r\n\tensureIntegerArgs,\r\n\tensureFloatArgs,\r\n\tensureFloatLim\r\n};","\r\nmodule.exports = {\r\n\tBigIntPacker:require('./bigint-packer.js'),\r\n\t...require('./convert-value.js'),\r\n\t...require('./array-utils.js'),\r\n\t...require('./numeric-system.js')\r\n\t\r\n};","\r\n/**\r\n * Разложить число в массив разрядов в системе base\r\n */\r\nfunction decomp(value, base){\r\n\tlet arr = [], i=0;\r\n\tlet current = value;\r\n\twhile(current>0n){\r\n\t\tarr[i] = current % base;\r\n\t\tcurrent = current / base;\r\n\t\t++i;\r\n\t}\r\n\treturn arr;\r\n}\r\n\r\n/**\r\n * Срезать ведущие нули\r\n */\r\nfunction cutZero(arr){\r\n\twhile(arr[arr.length-1] === 0n){\r\n\t\tarr.pop();\r\n\t}\r\n\t\r\n\treturn arr;\r\n}\r\n\r\n/**\r\n * Суммировать массив разрядов в системе base\r\n */\r\nfunction comp(arr, base){\r\n\tlet value = 0n;\r\n\tfor(let i=arr.length; i--;){\r\n\t\tvalue *= base;\r\n\t\tvalue += arr[i];\r\n\t}\r\n\treturn value;\r\n}\r\n\r\nfunction offset(arr, summ){\r\n\treturn arr.map((x)=>(x+summ));\r\n}\r\n\r\n/**\r\n * Преобразовать число из системы base в безнулевую систему base\r\n * @param arr : Array<BigInt[0..base-1]>\r\n * @param base : BigInt - количество цифр системы\r\n * @return Array<BigInt[1..base]>\r\n *\r\n * comp(arr, base) === comp(withoutZero(arr, base), base);\r\n */\r\nfunction withoutZero(arr, base){\r\n\tcutZero(arr);\r\n\t//предполагаем, что после этого в последнем элементе не ноль\r\n\tfor(let i = 0, max = arr.length-1; i<max; ++i){\r\n\t\tif(arr[i]<=0n){\r\n\t\t\tarr[i] += base;\r\n\t\t\tarr[i+1]--;\r\n\t\t}\r\n\t}\r\n\tcutZero(arr);\r\n\t//Получен массив значений 1..base\r\n\t\r\n\treturn arr;\r\n}\r\n\r\n/**\r\n * Количество значений, представимых в системе base не более size разрядов\r\n */\r\nfunction countWithZero(size, base){\r\n\treturn base ** size;\r\n}\r\n\r\n/**\r\n * Количество значений, представимых в безнулевой системе base не более size разрядов\r\n */\r\nfunction countWithoutZero(size, base){\r\n\tlet res = 1n;\r\n\tfor(let i = size; i--;){\r\n\t\tres = res*base + 1n;\r\n\t}\r\n\treturn res;\r\n}\r\n\r\nmodule.exports = {\r\n\tdecomp,\r\n\tcomp,\r\n\twithoutZero,\r\n\t\r\n\tcutZero,\r\n\toffset,\r\n\t\r\n\tcountWithZero,\r\n\tcountWithoutZero\r\n}","function getParameter(paramName) {\r\n  let paramValue;\r\n  if (typeof process !== 'undefined' && process.versions && process.versions.node) {\r\n    // Запущено в Node.js\r\n    const args = process.argv.slice(2);\r\n\tparamName = '--' + paramName;\r\n    const paramArgIndex = args.findIndex(arg => arg.startsWith(paramName));\r\n    if (paramArgIndex>-1) {\r\n      const paramArg = args[paramArgIndex];\r\n      // Если параметр в формате --имя_параметра=значение\r\n      if (paramArg.includes('=')) {\r\n        paramValue = paramArg.split('=')[1] // Возвращаем значение параметра\r\n      }\r\n\t  else {\r\n        // Если параметр в формате --имя_параметра значение\r\n         paramValue = args[paramArgIndex + 1] // Возвращаем следующее значение после параметра\r\n      }\r\n    }\r\n  } \r\n  else if (typeof window !== 'undefined') {\r\n    // Запущено в браузере\r\n    const url = new URL(window.location.href);\r\n    const params = Object.fromEntries(url.searchParams.entries());\r\n    \r\n    // Проверяем GET-параметры\r\n    if (params[paramName]) {\r\n      paramValue = params[paramName] // Возвращаем значение параметра из GET-параметров\r\n    }\r\n    else{\r\n\t\t// Проверяем хэш\r\n\t\tconst hashParams = new URLSearchParams(window.location.hash.slice(1));\r\n\t\tif (hashParams.has(paramName)) {\r\n\t\t  paramValue = hashParams.get(paramName) // Возвращаем значение параметра из хэша\r\n\t\t}\r\n\t}\r\n  }\r\n  \r\n  return paramValue;\r\n}\r\n\r\nmodule.exports = getParameter;","const {check, property, wrapFuncForProps} = require('./check.js');\r\nmodule.exports = {\r\n\tproperty,\r\n\tcheck,\r\n\twrapFuncForProps,\r\n\tarb: require('./arbitrary/index.js')\r\n}","/***\r\n * Представляет собой упорядоченное множество целых неотрицательных чисел, которые\r\n * первоначально стоят по порядку, под индексами, равными значению,\r\n * но их можно обменивать местами\r\n */\r\nclass PermutatedTail extends Map{\r\n\t/**\r\n\t * Метод получения числа по индексу\r\n\t */\r\n\tget(index){\r\n\t\tif(this.has(index)){\r\n\t\t\treturn super.get(index);\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn index;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Метод обмена позиций во множестве значениями\r\n\t * @param a - индекс первого числа\r\n\t * @param b - индекс второго числа\r\n\t */\r\n\tswap(a, b){\r\n\t\tlet A = this.get(a);\r\n\t\tlet B = this.get(b);\r\n\t\t\r\n\t\tthis.set(b, A);\r\n\t\tthis.set(a, B);\r\n\t}\r\n}\r\n\r\n/**\r\n * @function uniqueRandom - генерирует массив уникальных случайных значений с помощью функции генератора\r\n * @param n : Int - количество генерируемых значений\r\n * @param gen : Pregen - генератор случайных значений\r\n * @return Array[n]<BigInt> - массив уникальных случайных значений\r\n */\r\nfunction uniqueRandom(n, gen){\r\n\tlet tail = new PermutatedTail();\r\n\r\n\tlet result = [];\r\n\tfor(let i = 0; i<n; ++i){\r\n\t\tlet alt = BigInt(i);\r\n\t\tlet k = gen(alt);\r\n\t\tlet v = tail.get(k);\r\n\t\tresult.push(v);\r\n\t\ttail.swap(k, alt);\r\n\t}\r\n\t\r\n\treturn result;\r\n}\r\n\r\nmodule.exports = {\r\n\tuniqueRandom\r\n};","const prover = require('./index.js');\r\n\r\nmodule.exports = prover;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(327);\n",""],"names":[],"sourceRoot":""}